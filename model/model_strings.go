// Code generated by "stringer -type=CommandStatus,CommandType,DiagnosticType -output=model_strings.go"; DO NOT EDIT.

package model

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Passed-0]
	_ = x[Disabled-1]
	_ = x[Failed-2]
	_ = x[NotRun-3]
}

const _CommandStatus_name = "PassedDisabledFailedNotRun"

var _CommandStatus_index = [...]uint8{0, 6, 14, 20, 26}

func (i CommandStatus) String() string {
	if i < 0 || i >= CommandStatus(len(_CommandStatus_index)-1) {
		return "CommandStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CommandStatus_name[_CommandStatus_index[i]:_CommandStatus_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Configure-0]
	_ = x[Build-1]
	_ = x[Test-2]
	_ = x[Valgrind-3]
}

const _CommandType_name = "ConfigureBuildTestValgrind"

var _CommandType_index = [...]uint8{0, 9, 14, 18, 26}

func (i CommandType) String() string {
	if i < 0 || i >= CommandType(len(_CommandType_index)-1) {
		return "CommandType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CommandType_name[_CommandType_index[i]:_CommandType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Error-0]
	_ = x[Warning-1]
	_ = x[Note-2]
}

const _DiagnosticType_name = "ErrorWarningNote"

var _DiagnosticType_index = [...]uint8{0, 5, 12, 16}

func (i DiagnosticType) String() string {
	if i < 0 || i >= DiagnosticType(len(_DiagnosticType_index)-1) {
		return "DiagnosticType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DiagnosticType_name[_DiagnosticType_index[i]:_DiagnosticType_index[i+1]]
}
